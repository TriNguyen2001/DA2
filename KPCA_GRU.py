#-------------------------------------------------------Preprocessing--------------------------------------------
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import os

from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.decomposition import KernelPCA

# ------------------------
# 1. ƒê·ªçc , xu·∫•t d·ªØ li·ªáu
data = pd.read_excel(r"D:\TriNguyen\242\DA2\visual code\Data\example_solar_forecast_input.xlsx")
output_dir = r"D:\TriNguyen\242\DA2\visual code\Data"
os.makedirs(output_dir, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥

# 2. Lo·∫°i b·ªè c·ªôt kh√¥ng ph·∫£i s·ªë (nh∆∞ datetime ho·∫∑c object)
data = data.select_dtypes(include=["number"])

# 3. X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
data = data.fillna(data.mean())

# 4. ƒê·∫∑t X v√† y
y = data["power"]
X = data.drop(columns=["power"])

# 5. Chu·∫©n h√≥a d·ªØ li·ªáu
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

# ------------------------
# üìå 1. Heatmap Pearson to√†n b·ªô
cols_to_exclude = ['hour', 'day', 'month']
heatmap_data = data.drop(columns=[col for col in cols_to_exclude if col in data.columns])

plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data.corr(), annot=True, cmap="coolwarm")
plt.title("Heatmap Pearson Correlation Matrix (lo·∫°i hour/day/month)")
plt.tight_layout()
plt.show()

# ------------------------
# üìå 2. Heatmap gi·ªØa power hi·ªán t·∫°i v√† qu√° kh·ª© (t-1 ƒë·∫øn t-24)
for lag in range(1, 25):
    data[f'power_t-{lag}'] = data['power'].shift(lag)

data_lagged = data.dropna()
power_lags = [f'power_t-{i}' for i in range(1, 25)]
corr_lag = data_lagged[power_lags + ['power']].corr()

plt.figure(figsize=(14, 5))
sns.heatmap(corr_lag[['power']].T, annot=True, cmap="YlGnBu")
plt.title("T∆∞∆°ng quan gi·ªØa c√¥ng su·∫•t hi·ªán t·∫°i v√† qu√° kh·ª© (t-1 ƒë·∫øn t-24)")
plt.xlabel("C√¥ng su·∫•t hi·ªán t·∫°i (power)")
plt.ylabel("L√πi th·ªùi gian")
plt.tight_layout()
plt.show()

# T·∫°o danh s√°ch c√°c c·ªôt tr·ªÖ
lag_features = [f'power_t-{i}' for i in range(1, 25)]

# T·∫°o DataFrame so s√°nh gi·ªØa power hi·ªán t·∫°i v√† qu√° kh·ª©
comparison_df = data_lagged[lag_features + ['power']].copy()

# Xu·∫•t ra file Excel
output_path = os.path.join(output_dir, "power_comparison.xlsx")
comparison_df.to_excel(output_path, index=False)

print("‚úÖ ƒê√£ l∆∞u file power__comparison.xlsx ƒë·ªÉ so s√°nh!")


# ------------------------
# üìå 3. F-score - Feature Importance
X_filtered = X_scaled_df.drop(columns=[col for col in ['hour', 'day', 'month'] if col in X_scaled_df.columns])
f_score_selector = SelectKBest(score_func=f_regression, k='all')
f_score_selector.fit(X_filtered, y)
f_scores = f_score_selector.scores_

plt.figure(figsize=(12, 5))
sns.barplot(x=X_filtered.columns, y=f_scores, palette='viridis')
plt.title("M·ª©c ƒë·ªô quan tr·ªçng c·ªßa ƒë·∫∑c tr∆∞ng (F-score) - lo·∫°i b·ªè hour/day/month")
plt.ylabel("F-score")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------
# üìå 4. Gi·∫£m chi·ªÅu b·∫±ng Kernel PCA
kpca = KernelPCA(n_components=2, kernel='rbf', gamma=0.1)
X_kpca = kpca.fit_transform(X_scaled)

explained_variance = np.var(X_kpca, axis=0)
explained_ratio = explained_variance / np.sum(explained_variance)

print("üìä ƒê√≥ng g√≥p ph∆∞∆°ng sai c·ªßa t·ª´ng th√†nh ph·∫ßn KPCA:", explained_ratio)

plt.figure(figsize=(6, 4))
plt.bar(['PC1', 'PC2'], explained_ratio * 100, color='steelblue')
plt.title("ƒê√≥ng g√≥p ph∆∞∆°ng sai c√°c th√†nh ph·∫ßn KPCA")
plt.ylabel("T·ª∑ l·ªá (%)")
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()


# ------------------------------------------------ TRAINING GRU------------------------------------------------
# üì¶ T·∫°o X_final t·ª´ lag features v√† KPCA

# B∆∞·ªõc 1: Th√™m l·∫°i power lag features v√¨ tr∆∞·ªõc ƒë√≥ ƒë√£ dropna r·ªìi
for lag in range(1, 25):
    data[f'power_t-{lag}'] = data['power'].shift(lag)


# B∆∞·ªõc 2: T·∫°o l·∫°i data_lagged sau khi c√≥ KPCA
data_lagged = data.dropna().reset_index(drop=True)

# B∆∞·ªõc 3: T·∫°o DataFrame t·ª´ KPCA
kpca_df = pd.DataFrame(X_kpca, columns=["PC1", "PC2"])
kpca_df = kpca_df.iloc[-len(data_lagged):].reset_index(drop=True)  # kh·ªõp chi·ªÅu

# B∆∞·ªõc 4: K·∫øt h·ª£p th√†nh X_final
lag_features = [f'power_t-{i}' for i in range(1, 25)]
X_final = pd.concat([
    data_lagged[lag_features].reset_index(drop=True),
    kpca_df
], axis=1)

# B∆∞·ªõc 5: T·∫°o y_final
y_final = data_lagged["power"].reset_index(drop=True)

# B∆∞·ªõc 6: Xu·∫•t ra file Excel ho·∫∑c CSV
X_final["target_power"] = y_final
output_path_for_GRU = os.path.join(output_dir, "X_final_for_GRU.xlsx")
X_final.to_excel(output_path_for_GRU, index=False)
print("‚úÖ Xu·∫•t file X_final_for_GRU.xlsx th√†nh c√¥ng!")